from flask import Flask, request, redirect, session, Response, render_template
from typing import List
from tinydb import TinyDB, Query
from tinydb.table import Document
import os
import urllib
import random
import string
import base64
import json

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY')

db = TinyDB('../db.json')

auth_server = {
    'authorization_endpoint': 'http://localhost:10001/authorize',
    'token_endpoint': 'http://localhost:10001/token'
}

clients = [
    {
        'client_id': 'oauth-client-1',
        'client_secret': 'oauth-client-secret-1',
        'redirect_uris': ['http://localhost:10000/callback'],
        'scope': 'hoge huga'
    }
]

def get_client(client_id: str):
    return next(filter(lambda x: x['client_id']==client_id, clients), None)

def build_url(base: str, options: dict) -> str:
    pr = urllib.parse.urlparse(base)
    return urllib.parse.urlunparse(pr._replace(query=urllib.parse.urlencode(options, doseq=True)))

def generate_randomstring(size: int) -> str:
    return ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(size))

def difference(list_a: List[str], list_b: List[str]):
    return list(set(list_a).difference(set(list_b)))

def insert_to_db(d: dict):
    if len(db.all()) == 0:
        db.insert(d)
    else:
        db.insert(Document(d, doc_id=db.all()[-1].doc_id+1))

@app.route("/", methods=["GET"])
def index():
    return render_template('index.html', clients=clients, auth_server=auth_server)

@app.route("/authorize", methods=["GET"])
def authorize():
    client = get_client(request.args.get('client_id'))
    if client == None:
        print('Unknown client %s' % (request.args.get('client_id')))
        return render_template('error.html', error='Unknown client')

    if request.args.get('redirect_uri') not in client['redirect_uris']:
        print('Mismatched redirect URI, expected %s but got %s' % (client['redirect_uris'], request.args.get('redirect_uri')))
        return render_template('error.html', error='Invalid redirect URI')
    rscope: List[str] = request.args.get('scope').split(' ') if request.args.get('scope') != None else []
    cscope: List[str] = client['scope'].split(' ') if client['scope'] is not None else []
    if len(difference(rscope, cscope)) > 0: # check scope equivalence
        url_parsed: str = urllib.parse.urlparse(request.args.get('redirect_uri'))
        d = urllib.parse.parse_qs(url_parsed.query)
        d['error'] = 'invalid_scope'
        return redirect(build_url(request.args.get('redirect_uri'), d))
    reqid: str = generate_randomstring(8)
    req_d = dict(request.args)
    req_d['reqid'] = reqid
    insert_to_db(req_d)
    return render_template('approve.html', client=client, reqid=reqid, scope=rscope)
    

@app.route("/approve", methods=["POST"])
def approve():
    reqid: str = request.form.get('reqid')
    if reqid == None:
        return render_template('error.html', error='No reqid')
    
    Req = Query()
    res = db.search(Req.reqid == reqid)
    if len(res) == 0:
        return render_template('error.html', error='No matching authorization request')
    
    query = res[0]
    db.remove(Req.reqid == reqid)
    if request.form.get('approve') != None:
        if res[0]['response_type'] == 'code':
            code: str = generate_randomstring(8)
            rscope: List[str] = list(map(lambda y: y[len('scope_'):], list(filter(lambda x: x.startswith('scope_'), dict(request.form).keys()))))
            client = get_client(res[0]['client_id'])
            cscope: List[str] = client['scope'].split(' ') if client['scope'] != None else []
            if len(difference(rscope, cscope)) > 0:
                url_parsed: str = urllib.parse.urlparse(query['redirect_uri'])
                d = urllib.parse.parse_qs(url_parsed.query)
                d['error'] = 'invalid_scope'
                return redirect(build_url(query['redirect_uri'], d))
            # save the code
            insert_to_db({'code': code, 'authorization_endpoint_request': query, 'scope': rscope, 'user': session.get('name')})
            
            url_parsed: str = urllib.parse.urlparse(query['redirect_uri'])
            d = urllib.parse.parse_qs(url_parsed.query)
            d['code'] = code
            d['state'] = query['state']
            return redirect(build_url(query['redirect_uri'], d))
        elif res[0]['response_type'] == 'token':
            client = get_client(res[0]['client_id'])
            cscope: List[str] = client['scope'].split(' ') if client['scope'] != None else []
            
            access_token: str = generate_randomstring(64)
            insert_to_db({'access_token': access_token, 'token_type': 'Bearer', 'scope': cscope, 'name': session.get('name'), 'client_id': query['client_id']})  
            url_parsed: str = urllib.parse.urlparse(query['redirect_uri']) 
            d = urllib.parse.parse_qs(url_parsed.query)
            d['access_token'] = access_token
            return redirect(build_url(query['redirect_uri'], d))
        else:
            # invalid response code type
            url_parsed: str = urllib.parse.urlparse(query['redirect_uri'])
            d = urllib.parse.parse_qs(url_parsed.query)
            d['error'] = 'access_denied'
            return redirect(build_url(query['redirect_uri'], d))
    else:
        # user denied
        url_parsed: str = urllib.parse.urlparse(query['redirect_uri'])
        d = urllib.parse.parse_qs(url_parsed.query)
        d['error'] = 'access_denied'
        return redirect(build_url(query['redirect_uri'], d))
    

@app.route("/token", methods=["POST"])
def token():
    auth = request.headers.get("authorization")
    if auth != None:
        client_credentials: List[str] = base64.b64decode(auth[len("Basic "):]).decode('utf-8').split(':')
        client_id: str = urllib.parse.quote(client_credentials[0])
        client_secret: str = urllib.parse.quote(client_credentials[1])
    
    if request.form.get('client_id') != None:
        if client_id != '':
            print('Client attempted to authenticate with multiple methods')
            return Response(response=json.dumps({'error': 'invalid_client'}), status=401)
        client_id: str = request.form.get('client_id')
        client_secret: str = request.form.get('client_secret')
            
    client = get_client(client_id)
    if client == None:
        print('Unknown client %s' % (client_id))
        return Response(response=json.dumps({'error': 'invalid_client'}), status=401)

    if client['client_secret'] != client_secret:
        print('Mismatched client secret, expected %s got %s' % (client['client_secret'], client_secret))
        return Response(response=json.dumps({'error': 'invalid_client'}), status=401)
    
    if request.form.get('grant_type') == 'authorization_code':
        Code = Query()
        res = db.search(Code.code == request.form.get('code'))
        if len(res) != 0:
            code = res[0]
            db.remove(Code.code == request.form.get('code'))
            if code['authorization_endpoint_request']['client_id'] == client_id:
                refresh_token: str = None
                access_token: str = generate_randomstring(64)
                cscope = None
                if len(code['scope']) > 0:
                    cscope = ' '.join(code['scope'])
                
                # check refresh token
                Ref = Query()
                res = db.search(Ref.name == session.get('name'))
                rtl = list(filter(lambda x: 'refresh_token' in x, res))
                if len(rtl) == 0:
                    refresh_token = generate_randomstring(64)
                    insert_to_db({'refresh_token': refresh_token, 'token_type': 'Bearer', 'scope': cscope, 'name': code['user'], 'client_id': client_id})
                else:
                    refresh_token = rtl[0]['refresh_token']
                
                insert_to_db({'access_token': access_token, 'token_type': 'Bearer', 'scope': cscope, 'name': code['user'], 'client_id': client_id})   
                
                print('Issuing access token %s' % (access_token))
                print('with scope %s' % (cscope))
                
                print('Issued tokens for code %s' % (request.form.get('code')))
                return Response(response=json.dumps({'access_token': access_token, 'refresh_token': refresh_token, 'token_type': 'Bearer', 'scope': cscope}), status=200)
            else:
                print('Client mismatch, expected %s got %s' % (code['authorization_endpoint_request']['client_id'], client_id))
                return Response(response=json.dumps({'error': 'invalid_grant'}), status=400)
        else:
            print('Unknown code, %s' % (request.form.get('code')))
            return Response(response=json.dumps({'error': 'invalid_grant'}), status=400)
    elif request.form.get('grant_type') == 'refresh_token':
            Ref = Query()
            res = db.search(Ref.refresh_token == request.form.get('refresh_token'))
            if len(res) == 0:
                print('No matching token was found.')
                return Response(response=json.dumps({'error': 'invalid_grant'}), status=400)
            
            refresh_token: str = res[0]['refresh_token']
            scope: str = res[0]['scope']
            name: str = res[0]['name']
            print('We found a matching refresh token: %s' % (request.form.get('refresh_token')))
            
            if res[0]['client_id'] != client_id:
                db.remove(Ref.refresh_token == request.form.get('refresh_token'))
                return Response(response=json.dumps({'error': 'invalid_grant'}), status=400)
            
            Ref = Query()
            res = db.search(Ref.name == session.get('name'))
            atl = list(filter(lambda x: 'access_token' in x, res))
            doc_ids: List[int] = [at.doc_id for at in atl]
            # revoke other access_token
            db.remove(doc_ids=doc_ids)
            
            access_token: str = generate_randomstring(64)
            insert_to_db({'access_token': access_token, 'token_type': 'Bearer', 'scope': scope, 'name': name, 'client_id': client_id})
            return Response(response=json.dumps({'access_token': access_token, 'refresh_token': refresh_token, 'token_type': 'Bearer', 'scope': scope}), status=200)
    else:
        print('Unknown grant type %s' % (request.form.get('grant_type')))
        return Response(response=json.dumps({'error': 'unsupported_grant_type'}), status=400)

@app.route("/revoke", methods=["POST"])
def revoke():
    auth = request.headers.get("authorization")
    if auth != None:
        client_credentials: List[str] = base64.b64decode(auth[len("Basic "):]).decode('utf-8').split(':')
        client_id: str = urllib.parse.quote(client_credentials[0])
        client_secret: str = urllib.parse.quote(client_credentials[1])
    
    if request.form.get('client_id') != None:
        if client_id != '':
            print('Client attempted to authenticate with multiple methods')
            return Response(response=json.dumps({'error': 'invalid_client'}), status=401)
        client_id: str = request.form.get('client_id')
        client_secret: str = request.form.get('client_secret')
            
    client = get_client(client_id)
    if client == None:
        print('Unknown client %s' % (client_id))
        return Response(response=json.dumps({'error': 'invalid_client'}), status=401)

    if client['client_secret'] != client_secret:
        print('Mismatched client secret, expected %s got %s' % (client['client_secret'], client_secret))
        return Response(response=json.dumps({'error': 'invalid_client'}), status=401)
    
    if request.form.get('token_type_hint') != 'access_token' and request.form.get('token_type_hint') != 'refresh_token':
        print('Unsupported token type %s' % request.form.get('token_type_hint'))
        return Response(response=json.dumps({'error': 'unsupported_token_type'}), status=401)
    
    in_token: str = request.form.get('token')
    if request.form.get('token_type_hint') == 'access_token':
        res = db.get(Query()['access_token'] == in_token)
        if res != None:
            db.remove(doc_ids=[res.doc_id])
    if request.form.get('token_type_hint') == 'refresh_token':
        res = db.get(Query()['refresh_token'] == in_token)
        if res != None:
            db.remove(doc_ids=[res.doc_id])
    
    return Response(status=200)

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=10001)